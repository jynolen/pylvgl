import pytest
import os
import struct
from pathlib import Path 


from lvgl.converter.utility import palette_to_rgb, convert_to_alpha
from lvgl.lvgl_enum import ColorFormat, OuputFormat
from lvgl.converter import Converter
from lvgl.deconverter import Deconverter

test_sample_palette_to_rgb = [
    (   [(123456, 0), (654321, 1), (159753, 2)],
        [(123456, (0, 0, 0)), (654321, (255, 255, 255)), (159753, (128, 128, 128))],
        [(0, 0, 0), (255, 255, 255), (128, 128, 128)]
    ),
    (
        [(123456, 0), (654321, 2), (159753, 1)],
        [(123456, (0, 0, 0)), (654321, (255, 255, 255)), (159753, (128, 128, 128))],
        [(0, 0, 0), (128, 128, 128), (255, 255, 255)]
    ),
    (
        [(123456, 1), (654321, 2), (159753, 0)],
        [(123456, (0, 0, 0)), (654321, (255, 255, 255)), (159753, (128, 128, 128))],
        [(128, 128, 128), (0, 0, 0), (255, 255, 255)]
    ),
    (
        [(123456, 1), (654321, 0), (159753, 2)],
        [(123456, (0, 0, 0)), (654321, (255, 255, 255)), (159753, (128, 128, 128))],
        [(255, 255, 255), (0, 0, 0), (128, 128, 128)]
    ),
    (
        [(123456, 2), (654321, 1), (159753, 0)],
        [(123456, (0, 0, 0)), (654321, (255, 255, 255)), (159753, (128, 128, 128))],
        [(128, 128, 128), (255, 255, 255), (0, 0, 0)]
    ),
    (
        [(123456, 2), (654321, 0), (159753, 1)],
        [(123456, (0, 0, 0)), (654321, (255, 255, 255)), (159753, (128, 128, 128))],
        [(255, 255, 255), (128, 128, 128), (0, 0, 0)]
    )
]

test_alpha = [
    (1907183513, 28),(1303068567, 100),(833240990, 156),(447300002, 203),(212157350, 231),(209534637, 231),(444415150, 203),(830291629, 156),(1299922858, 100),(1887259049, 31),(2107594883, 4),(1353791621, 95),(498219918, 196),(494615723, 196),(1350056871, 95),(2088129680, 7),(1421359741, 87),(297350529, 220),(276446122, 223),(1400388774, 88),(1958034544, 23),(633352308, 180),(611793319, 183),(1937196450, 24),(1706898791, 52),(247802732, 227),(242825642, 227),(1685339549, 55),(1640441951, 60),(97134434, 244),(91764905, 244),(1635334568, 60),(1724068186, 51),(97330265, 244),(91764648, 244),(1685470877, 55),(1958557781, 23),(265494866, 224),(45169554, 251),(548355479, 191),(866728856, 152),(1236026017, 108),(1286161317, 103),(1285833640, 103),(1285834157, 103),(1285638321, 103),(1285507509, 103),(1285376697, 103),(1285246400, 103),(1284984516, 103),(1284984776, 103),(1284788169, 103),(1284788168, 103),(1284722376, 103),(1284656839, 103),(1284656582, 103),(1284656581, 103),(1284525252, 103),(1284524995, 103),(1284459716, 103),(1284459202, 103),(1284327872, 103),(1284393664, 103),(1284262335, 103),(1284196542, 103),(1284196541, 103),(1284130492, 103),(1284130492, 103),(1283999163, 103),(1283933626, 103),(1233602233, 108),(864108723, 152),(545604534, 191),(42156470, 251),(242825642, 227),(1953907868, 23),(651501386, 179),(599275654, 184),(1454454662, 83),(2056536443, 11),(2054902432, 11),(1451508914, 83),(612516788, 183),(645413800, 179),(1439902024, 84),(549139064, 191),(1756773502, 47),(1753434031, 47),(578896306, 187),(1417100452, 87),(2124961123, 3),(316480061, 219),(96872811, 244),(1304179824, 100),(1333806255, 96),(92421811, 244),(310000042, 219),(2105500566, 4),(1406738490, 88),(248195427, 227),(1723544678, 51),(1906787970, 28),(1588609420, 67),(1303001996, 100),(1286224015, 103),(1286027667, 103),(1285962648, 103),(1302609564, 100),(1352875936, 95),(1352679848, 95),(1352614571, 95),(1352418736, 95),(1352222387, 95),(1352157367, 95),(1352027069, 95),(1351896256, 95),(1351765443, 95),(1351634116, 95),(1351634115, 95),(1351568322, 95),(1351568065, 95),(1351502527, 95),(1351436992, 95),(1351370942, 95),(1351370941, 95),(1351305404, 95),(1351239611, 95),(1351239356, 95),(1351173817, 95),(1351108025, 95),(1351042744, 95),(1602767797, 64),(1904365482, 28),(1770146223, 44),(243417012, 227),(1383676837, 91),(551623219, 191),(248456538, 227),(1875585889, 32),(1941324155, 24),(1035678844, 132),(314062208, 219),(294209210, 220),(1032275385, 132),(1938181552, 24),(1887585972, 31),(243417011, 227),(544881323, 191),(1960060724, 23),(97853778, 244),(1724199002, 51),(2091601265, 7),(1052848239, 131),(79769460, 247),(59262138, 248),(1032209847, 132),(2071284635, 8),(1736328106, 48),(92422067, 244),(1920089758, 27),(1374102319, 92),(1255090513, 107),(1890855002, 31),(449260391, 203),(428295609, 204),(1904034474, 28),(1317029040, 99),(1367097771, 92),(887691559, 151),(500638280, 196),(1907896665, 28),(264971870, 224),(260391864, 224),(1903969446, 28),(545341874, 191),(880557483, 151),(485167646, 199),(1708535628, 52),(2091403615, 7),(483402839, 199),(445072825, 203),(2087995024, 7),(1736854707, 48),(461061036, 200),(351409951, 215),(517740857, 195),(1087317328, 127),(1065698997, 128),(595804852, 184),(327040687, 216),(99619866, 244),(1373513789, 92),(1976646231, 20),(98049353, 244),(747457727, 167),(1905020859, 28),(1434863799, 84),(160057278, 236),(76039611, 247),(1955155128, 23),(1434600625, 84),(75316908, 247),(49350927, 251),(2026259794, 15),(1104617027, 124),(445730244, 203),(1485195702, 79),(1099318712, 124),(2038060191, 12),(42222007, 251),(49350667, 251),(401020715, 208),(349904190, 215),(899376326, 148),(327632313, 216),(478430133, 199),(49350152, 251),(820779047, 159),(1992443221, 19),(814697922, 159),(1971869103, 20),(1988449451, 19),(864305846, 152),(49284869, 251),(1038493489, 132),(1709256514, 52),(110185670, 243),(1838438343, 36),(831146685, 156),(1686851518, 55),(1115964596, 123),(49351684, 251),(1257314081, 107),(1473781301, 80),(129578373, 240),(666122121, 176),(1135623567, 120),(1353334671, 95),(1539008681, 72),(1539472055, 72),(1453672604, 83),(1252541348, 107),(816006310, 159),(245580971, 227),(110251207, 243),(932269507, 144),(1183994308, 115),(512707523, 195),(1417758893, 87),(1283998906, 103),(49352964, 251),(1257581874, 107),(1372922931, 92),(498872953, 196),(1471756928, 80),(2107793027, 4),(1688030117, 55),(849299376, 155),(43993012, 251),(1384138154, 91),(1284064699, 103),(49354500, 251),(1257647407, 107),(1373054000, 92),(298134380, 220),(1539061105, 72),(1855540395, 35),(647841970, 179),(1384138413, 91),(1284130235, 103),(49356036, 251),(1257778221, 107),(1356473133, 95),(751250788, 167),(2059221355, 11),(1268402864, 104),(60705209, 248),(1384203950, 91),(1284130493, 103),(32580101, 252),(1257712684, 107),(1356603947, 95),(986131034, 139),(1773352311, 44),(1320695935, 99),(1169701766, 116),(1119239817, 123),(1270168204, 104),(1588149901, 67),(2074041744, 8),(1620724147, 63),(94193848, 244),(1384269743, 91),(1284196028, 103),(1257646892, 107),(1356735017, 95),(902636625, 148),(2042840693, 12),(1103181170, 124),(230633588, 228),(78658193, 247),(800013460, 160),(1789214608, 43),(1604144308, 64),(60705209, 248),(1384270001, 91),(1284196286, 103),(1257712683, 107),(1356866086, 95),(550969674, 191),(1472475235, 80),(164047206, 236),(28326806, 252),(1017986968, 135),(2089636739, 7),(1184582321, 115),(1384335536, 91),(1284262078, 103),(1257778475, 107),(1356996901, 95),(98244928, 244),(1909665103, 28),(1137258333, 120),(514473112, 195),(2057978010, 11),(530401458, 192),(1384401329, 91),(1284327872, 103),(1257779243, 107),(1357062435, 95),(1088104517, 127),(1238248021, 108),(548027544, 191),(2127073718, 3),(1788627631, 43),(1384467122, 91),(1284393408, 103),(1257780010, 107),(1357062178, 95),(115480116, 243),(2009939279, 16),(1741695824, 48),(47587150, 251),(1101741719, 124),(664815536, 176),(1384467123, 91),(1284459202, 103),(1257780778, 107),(1357062177, 95),(836836918, 156),(500703816, 196),(78658455, 247),(1923697815, 27),(1520585133, 75),(1384598195, 91),(1284459459, 103),(1257781546, 107),(1357062432, 95),(1507926837, 76),(1657874755, 59),(967786132, 140),(2109048245, 4),(128205740, 240),(1384663988, 91),(1284590532, 103),(1257782825, 107),(1356997408, 95),(2043235158, 12),(903618108, 148),(246496146, 227),(581125030, 187),(1384729780, 91),(1284656068, 103),(1257784105, 107),(1357063712, 95),(317527588, 219),(383785783, 211),(1839545993, 36),(933577123, 144),(1384729782, 91),(1284721861, 103),(1257784873, 107),(1356999200, 95),(451611931, 203),(1538080391, 72),(1286225826, 103),(1384795318, 91),(1284722118, 103),(1257786408, 107),(1357065505, 95),(468126741, 200),(1320171651, 99),(1286421660, 103),(1384926387, 91),(1284722119, 103),(1257787432, 107),(1373843745, 92),(468388627, 200),(1387214975, 91),(1286618265, 103),(1385122737, 91),(1284787656, 103),(1257788712, 107),(1357133601, 95),(435489296, 204),(216667687, 231),(1706375808, 52),(1085095313, 127),(1385187754, 91),(1284853450, 103),(1257789992, 107),(1357069344, 95),(83169299, 247),(652808224, 179),(62795896, 248),(2073904499, 8),(749812621, 167),(1385252775, 91),(1284919241, 103),(1257791271, 107),(1357136160, 95),(1743205688, 48),(1323770153, 99),(666906740, 176),(280311432, 223),(1385383589, 91),(1285050056, 103),(1257858343, 107),(1357202977, 95),(1122961675, 123),(2043690562, 12),(166727710, 236),(1556101490, 71),(1823426178, 39),(1385514144, 91),(1285049795, 103),(1257859879, 107),(1374046753, 92),(351539985, 215),(1206590241, 112),(549858151, 191),(1018902144, 135),(1385644700, 91),(1285311680, 103),(1257861159, 107),(1374048545, 92),(1542467373, 72),(535695130, 192),(113976926, 243),(1874997092, 32),(2058370930, 11),(163524729, 236),(1385775256, 91),(1285442233, 103),(1257862694, 107),(1374115106, 92),(368250633, 212),(2128576638, 3),(1994604356, 19),(351146009, 215),(97591638, 244),(1623729753, 63),(1052783217, 131),(1385906325, 91),(1285572789, 103),(1257798438, 107),(1374116898, 92),(1122833165, 123),(2028748098, 15),(619648029, 183),(248782670, 227),(1690576465, 55),(1774269289, 44),(63318892, 248),(1386036882, 91),(1285638066, 103),(1257734693, 107),(1374183714, 92),(32903685, 252),(1626019344, 63),(1323899684, 99),(250483230, 227),(98310977, 244),(953492297, 143),(2043229010, 12),(2026521708, 15),(315107427, 219),(1386102157, 91),(1285834157, 103),(1257736229, 107),(1323854636, 99),(116659724, 243),(1692543269, 55),(2128577673, 3),(1508185378, 76),(870847267, 152),(451548711, 203),(283645740, 223),(199432752, 232),(434445108, 204),(719265080, 171),(1289300034, 103),(1992963658, 19),(2059875165, 11),(516826459, 195),(1386298761, 91),(1285964712, 103),(1240959260, 108),(1424650019, 87),(116723973, 243),(1609308696, 64),(1925395542, 27),(500442196, 196),(1420116105, 87),(1286226598, 103),(988975402, 139),(1693677868, 55),(32903428, 252),(1055986703, 131),(2075606325, 8),(1490102089, 79),(215490634, 231),(1689599886, 55),(1118323103, 123),(771200801, 164),(1994690897, 19),(318116107, 219),(1357582092, 95),(2127982449, 3),(1691757636, 55),(601563455, 184),(1973308544, 20),(850149020, 155),(351574555, 215),(368408859, 212),(200542728, 232),(938613276, 144),(1525488927, 75),(2009741370, 16),(2093049454, 7),(1675174962, 56),(1121981227, 123),(417404721, 207),(398014337, 208),(430914966, 204),(1961271610, 23),(1140031775, 120),(99816215, 244),(368316439, 212),(418647063, 207),(183244835, 235),(1119499644, 123),(2007385736, 16),(94520745, 244),(251120426, 227),(1274192678, 104),(1978240066, 20),(100040718, 244),(113323637, 243),(1991194735, 19),(1353792137, 95),(346440359, 215),(469158686, 200),(435529501, 204),(1106348845, 124),(1136603503, 120),(515257732, 195),(514277538, 195),(888589854, 151),(1592830770, 67),(2096818346, 7),(502630172, 196),(516303976, 195),(2126021783, 3),(1655846523, 59),(917192349, 147),(1341510714, 96),(435661847, 204),(2130436243, 3),(1961268552, 23),(284526885, 223),(315238751, 219),(1957968742, 23),(482095223, 199),(1403798169, 88),(1928320333, 27),(1106620460, 124),(1961729616, 23),(536118546, 192),(516826711, 195),(1992244321, 19),(1186869616, 115),(1956396937, 23),(553047072, 191),(33010190, 252),(1593029425, 67),(2129642892, 3),(1139902243, 120),(100106517, 244),(114826826, 243),(1154425935, 119),(2125690758, 3),(1639853157, 60),(80161644, 247),(598882957, 184),(1391778106, 91),(100053526, 244),(1693497678, 55),(1978308692, 20),(1139966242, 120),(368475687, 212),(433857089, 204),(1154818629, 119),(1992831313, 19),(1757428066, 47),(147401060, 239),(1454455684, 83),(2130177954, 3),(318298145, 219),(100053527, 244),(1626385951, 63),(2027327573, 15),(1727099158, 51),(1508537652, 76),(1424386605, 87),(1424254508, 87),(1424253227, 87),(1424316971, 87),(1424250410, 87),(1424183082, 87),(1424182057, 87),(1424180521, 87),(1440890919, 84),(1440824359, 84),(1440823079, 84),(1440756006, 84),(1440689701, 84),(1440688678, 84),(1440753958, 84),(1440818982, 84),(1440753448, 84),(1440753449, 84),(1440818985, 84),(1440753451, 84),(1440556842, 84),(1440491307, 84),(1440294702, 84),(1440163632, 84),(1440098098, 84),(1439901748, 84),(1507275329, 76),(1725896242, 51),(2024618052, 15),(1640441429, 60),(164505179, 236),(347682177, 215),(1458952769, 83),(1072935736, 128),(2128924041, 3),(1171203407, 116),(81011539, 247),(1521957500, 75),(670488871, 176),(385264666, 211),(1575987763, 68),(1624121408, 63),(450371654, 203),(717041779, 171),(1962535029, 23),(267901201, 224),(418818081, 207),(1207150653, 112),(1944692546, 24),(1959540549, 23),(1306335799, 100),(467475515, 200),(264514155, 224),(2025737337, 15),(1710810735, 52),(100195105, 244),(334862356, 216),(737580315, 168),(921800220, 147),(1190629168, 115),(1240958240, 108),(1241021986, 108),(1241020449, 108),(1241018910, 108),(1240951580, 108),(1257792535, 107),(1257790997, 107),(1274566160, 104),(1274630158, 104),(1274563085, 104),(1274561293, 104),(1257718037, 107),(1274558222, 104),(1274556941, 104),(1274555662, 104),(1274553869, 104),(1274552845, 104),(1274485773, 104),(1274550285, 104),(1274483468, 104),(1274482444, 104),(1274481935, 104),(1274482450, 104),(1274482708, 104),(1274417430, 104),(1274286618, 104),(1240606253, 108),(971381286, 140),(770316328, 164),(367400233, 212),(164178532, 236),(1841838958, 36),(1643108913, 60),(100194847, 244),(164505178, 236),(1656367450, 59),(1760944994, 47),(267901200, 224),(265363793, 224),(1841968734, 36),(1962600307, 23),(670554669, 176),(752165965, 167),(2026652771, 15),(1458953027, 83),(301455396, 220),(349969215, 215),(1540566347, 72),(2130705058, 3),(1442175288, 84),(586601760, 187),(31855660, 252),(618732084, 183),(1490691389, 79),(1945163094, 24),(1358353983, 95),(871813166, 152),(469093157, 200),(335071774, 216),(49727281, 251),(66498093, 248),(83273515, 247),(116760614, 243),(167090205, 236),(167088925, 236),(167087133, 236),(167020061, 236),(167018781, 236),(167082524, 236),(167015452, 236),(167013916, 236),(167012380, 236),(167011100, 236),(167009564, 236),(167008028, 236),(167006748, 236),(166939676, 236),(166938140, 236),(166936860, 236),(166935324, 236),(166934300, 236),(166933020, 236),(166931484, 236),(166865180, 236),(166929692, 236),(166928924, 236),(166928156, 236),(166927644, 236),(166927646, 236),(166927648, 236),(166927906, 236),(183639330, 235),(385028122, 211),(535434272, 192),(954864932, 143),(1424234536, 87),(1975923519, 20)
]

sample_dir = Path(os.path.dirname(__file__)).joinpath("samples")

rgb_sample = []
bytes_value = [54, 76, 136, 185] # Random picked bytes


rgb_332_r = [ (c & 0b11100000)      for c in range(0,256) ]
rgb_332_g = [ (c & 0b11100000) >> 3 for c in range(0,256) ]
rgb_332_b = [ (c & 0b11000000) >> 6 for c in range(0,256) ]

rgb_565_r = [ (c & 0b11111000) << 8 for c in range(0,256) ]
rgb_565_g = [ (c & 0b11111100) << 3 for c in range(0,256) ]
rgb_565_b = [ (c & 0b11111000) >> 3 for c in range(0,256) ]

rgb_565_r = [ (c & 0b11111000) << 8 for c in range(0,256) ]
rgb_565_g = [ (c & 0b11111100) << 3 for c in range(0,256) ]
rgb_565_b = [ (c & 0b11111000) >> 3 for c in range(0,256) ]

rgb_888_r = [ (c & 0xff) <<  8 for c in range(0,256) ]
rgb_888_g = [ (c & 0xff) << 16 for c in range(0,256) ]
rgb_888_b = [ (c & 0xff) << 24 for c in range(0,256) ]


def p32(value):
    return "0b{0:032b}".format(value)

def p16(value):
    return "0b{0:016b}".format(value)

def p8(value):
    return "0b{0:08b}".format(value)

@pytest.mark.parametrize("a,b,expected", test_sample_palette_to_rgb)
def test_palette_to_rgb(a, b, expected):
    assert palette_to_rgb(a,b) == expected

@pytest.mark.parametrize("a, expected", test_alpha)
def test_convert_alpha(a, expected):
    assert convert_to_alpha(a) == expected

@pytest.mark.parametrize("r", bytes_value)
@pytest.mark.parametrize("g", bytes_value)
@pytest.mark.parametrize("b", bytes_value)
def test_convert_rgb332(r, g, b):
    byte_value = [ b for b in struct.pack("<B", rgb_332_r[r] | rgb_332_g[g] | rgb_332_b[b] )]
    assert (r,g,b) and byte_value == OuputFormat.RGB_332.value.convert_rgba(r,g,b, None), f"RGB was ({r},{g},{b})"
    assert (r & 0b11100000, g & 0b11100000, b & 0b11000000, -1) == OuputFormat.RGB_332.value.convert_bin(bytearray(byte_value)), f"Deconvert RGB was ({r},{g},{b})"

@pytest.mark.parametrize("r", bytes_value)
@pytest.mark.parametrize("g", bytes_value)
@pytest.mark.parametrize("b", bytes_value)
def test_convert_rgb565(r, g, b):
    _byte_value = rgb_565_r[r] | rgb_565_g[g] | rgb_565_b[b]
    byte_value = [ (_byte_value & 0xff00) >> 8, _byte_value & 0xff ]
    assert byte_value == OuputFormat.RGB_565.value.convert_rgba(r,g,b, None), f"RGB was ({r},{g},{b})"
    assert (r & 0b11111000, g & 0b11111100, b & 0b11111000, -1) == OuputFormat.RGB_565.value.convert_bin(bytearray(byte_value)), f"Deconvert RGB was ({r},{g},{b})"


@pytest.mark.parametrize("r", bytes_value)
@pytest.mark.parametrize("g", bytes_value)
@pytest.mark.parametrize("b", bytes_value)
def test_convert_rgb565_swap(r, g, b):
    # /!\ R and B are switch
    _byte_value = rgb_565_r[b] | rgb_565_g[g] | rgb_565_b[r]
    byte_value = [ (_byte_value & 0xff00) >> 8, _byte_value & 0xff ]
    assert byte_value == OuputFormat.RGB_565_SWAP.value.convert_rgba(r,g,b, None), f"RGB was ({r},{g},{b})"
    assert (r & 0b11111000, g & 0b11111100, b & 0b11111000, -1) == OuputFormat.RGB_565_SWAP.value.convert_bin(bytearray(byte_value)), f"Deconvert RGB was ({r},{g},{b})"

@pytest.mark.parametrize("r", bytes_value)
@pytest.mark.parametrize("g", bytes_value)
@pytest.mark.parametrize("b", bytes_value)
def test_convert_rgb8888(r, g, b):
    _byte_value = rgb_888_b[b] | rgb_888_g[g] | rgb_888_r[r] | 0xff
    byte_value = [ (_byte_value & 0xff000000) >> 24, (_byte_value & 0x00ff0000) >> 16, (_byte_value & 0x0000ff00) >> 8, 0xff ]
    assert byte_value == OuputFormat.RGB_888.value.convert_rgba(r,g,b, 0xff), f"RGB was ({r},{g},{b})"
    assert (r & 0xff, g & 0xff, b  & 0xff, 0xff) == OuputFormat.RGB_888.value.convert_bin(bytearray(byte_value)), f"Deconvert RGB was ({r},{g},{b})"

@pytest.mark.parametrize("out_mode", [ c.value for c in OuputFormat ] )
def test_true_color_convert(out_mode):
    img_file = sample_dir.joinpath("sample.png")
    args = {"dithering": False, "file": img_file, "output_format": out_mode}
    color_mode = ColorFormat.True_Color

    converter = Converter.instanciate(color_mode)(args)
    converter.convert()
    data = converter.export_to_bin()
    with open("output.bin", "wb") as fw:
        fw.write(data)

@pytest.mark.parametrize("out_mode", [ c.value for c in OuputFormat ])
def test_true_color_deconvert(out_mode):
    img_file = sample_dir.joinpath("sample.png")
    args = {"dithering": False, "file": img_file, "output_format": out_mode}
    color_mode = ColorFormat.True_Color

    converter = Converter.instanciate(color_mode)(args)
    converter.convert()
    data = converter.export_to_bin()
    with open("output.bin", "wb") as fw:
        fw.write(data)

    deconverter = Deconverter(Path("output.bin"), out_mode)
    assert deconverter.img_bytes == data
    deconv_parsed = deconverter.convert()
    for y in range(0, deconv_parsed.shape[0]):
        for x in range(0, deconv_parsed.shape[1]):
            (r_, g_, b_, a_) = deconv_parsed[y][x] 
            (r, g, b, a) = converter.image.getpixel((x, y))

            compute_val = converter.output_mode.convert_rgba(r,g,b,a)[0]
            deconvert_val = converter.output_mode.convert_rgba(r_,g_,b_,a_)[0]
            assert compute_val == deconvert_val, f"Deconvert RGB was ({r},{g},{b}) ({r_},{g_},{b_})"
    data = converter.export_to_bin()
